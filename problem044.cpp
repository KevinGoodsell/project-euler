/* Project Euler #44
 *
 * Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten
 * pentagonal numbers are:
 *
 * 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 *
 * It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
 * 70 − 22 = 48, is not pentagonal.
 *
 * Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
 * difference is pentagonal and D = |Pk − Pj| is minimised; what is the value of
 * D?
 */

#include <iostream>
#include <map>
#include <utility>

long get_pentagonal(long i)
{
    return i*(3*i-1)/2;
}

typedef std::map<long, long> sequence_cache; // Pn -> n
sequence_cache pentagonal;

bool is_pentagonal(long val)
{
    sequence_cache::iterator it = pentagonal.find(val);
    if (it != pentagonal.end()) {
        return true;
    }

    long n = 0;
    long pn = 0;
    sequence_cache::reverse_iterator rit;
    rit = pentagonal.rbegin();

    if (rit != pentagonal.rend()) {
        pn = rit->first;
        n = rit->second;
    }

    while (pn < val) {
        n++;
        pn = get_pentagonal(n);
        pentagonal[pn] = n;
    }

    return pn == val;
}

bool check_terms(long pn, long pm)
{
    return is_pentagonal(pn + pm) && is_pentagonal(pm - pn);
}

int main()
{
    unsigned min = -1;
    long i=2;
    for (; i<1000000000; i++) {
        long pi = get_pentagonal(i);
        long pj = get_pentagonal(i-1);
        if (pi - pj > min) {
            std::cout << "Done!" << std::endl;
            break;
        }

        for (long j=i-1; j>0; j--) {
            long pj = get_pentagonal(j);
            unsigned diff = pi - pj;
            if (diff > min) break;

            if (check_terms(pj, pi)) {
                min = diff;
            }
        }
    }

    std::cout << min << std::endl;

    return 0;
}
